// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum Languaje {
  en
  es
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  role                  Role                   @default(user)
  image                 String?
  account               Account[]
  isTwofactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Settings              Settings?
  Bank_Account          Bank_Account[]
  Categories            Category[]
  Transaction           Transaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Settings {
  id       String   @id @default(uuid())
  language Languaje @default(en)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
}

model Bank_Account {
  id          String        @id @default(uuid())
  plaidId     String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  Transaction Transaction[]
}

model Category {
  id          String        @id @default(uuid())
  plaidId     String?
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  Transaction Transaction[]
}

model Transaction {
  id         String       @id @default(uuid())
  amount     Int
  payee      String?
  notes      String
  date       DateTime
  accountId  String
  account    Bank_Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category?    @relation(fields: [categoryId], references: [id])
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
